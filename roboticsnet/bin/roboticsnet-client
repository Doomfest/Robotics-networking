#!/usr/bin/env python2.7

import sys
import argparse

from roboticsnet.client.rover_client import RoverClient
from roboticsnet.byte_helpers.queryproc_byte_arr_helper import QueryprocByteArrHelper
from roboticsnet.gateway_constants import *
from roboticsnet.roboticsnet_exception import RoboticsnetException

from colorama import Fore

# Configuration
parser = argparse.ArgumentParser('roboticsnet-client')

parser.add_argument('--forward',
        help='send forward command, given a value from 1 to 63',
        type=int)

parser.add_argument('--reverse',
        help='send reverse command, given a value from 1 to 63',
        type=int)

parser.add_argument('--turnLeft',
        help='send turn left command, given a value from 1 to 63',
        type=int)
        
parser.add_argument('--turnRight',
        help='send turn right command, given a value from 1 to 63',
        type=int)
        
parser.add_argument('--stop',
        help='send command to stop all motors',
        action='store_true')

parser.add_argument('--queryproc',
        help='send query about what is currently running',
        action='store_true')

parser.add_argument('--graceful',
        help='shutdown server gracefully',
        action='store_true')

parser.add_argument('--host',
        help='specify an alternate host to default localhost')

parser.add_argument('--port',
        help='specify an alternate port to default 5000',
        type=int)

parser.add_argument('--testall',
        help='sends a command of each',
        action='store_true')

parser.add_argument('--startvid',
        help='request video to start running',
        action='store_true')

parser.add_argument('--stopvid',
        help='request video to stop running',
        action='store_true')

args = parser.parse_args()

# These will be overwritten if --port, or --host is supplied
host, port = 'localhost', ROBOTICSNET_PORT

if args.host:
    host = args.host

if args.port:
    port = args.port

##### RUN
client = RoverClient(host, port)
print "Using port: " + Fore.GREEN, client.getPort(), Fore.RESET
print "Using host: " + Fore.GREEN, client.getHost(), Fore.RESET

def _forward():
    print "Send " + Fore.BLUE + "forward" + Fore.RESET + " command...",
    client.forward(args.forward)
    print Fore.GREEN, "Done!", Fore.RESET

def _reverse():
    print "Send " + Fore.BLUE + "reverse" + Fore.RESET + " command...",
    client.reverse(args.reverse)
    print Fore.GREEN, "Done!", Fore.RESET

def _turnLeft():
    print "Send " + Fore.BLUE + "turn left" + Fore.RESET+ " command...",
    client.turnLeft(args.turnLeft)
    print Fore.GREEN, "Done!", Fore.RESET

def _turnRight():
    print "Send " + Fore.BLUE + "turn right" + Fore.RESET+ " command...",
    client.turnRight(args.turnRight)
    print Fore.GREEN, "Done!", Fore.RESET

def _stop():
    print "Send " + Fore.BLUE + "stop" + Fore.RESET+ " command...",
    client.stop()
    print Fore.GREEN, "Done!", Fore.RESET

def _queryproc():
    print "Send " + Fore.BLUE + "query" + Fore.RESET + " to listener...",
    reply = client.query()
    print Fore.GREEN, "Done!", Fore.RESET
    print QueryprocByteArrHelper.format(reply)

def _startVideo():
    print "Send " + Fore.BLUE + "startvid" + Fore.RESET + " to listener...",
    client.startVideo()
    print Fore.GREEN, "Done!", Fore.RESET

def _stopVideo():
    print "Send " + Fore.BLUE + "stopvid" + Fore.RESET + " to listener...",
    client.stopVideo()
    print Fore.GREEN, "Done!", Fore.RESET

def _graceful():
    print "Requesting " + Fore.BLUE + "shutdown" + Fore.RESET + "...",
    client.graceful()
    print Fore.GREEN, "Done!", Fore.RESET

def _testAll():
    """ Test all commands with dummy data """
    args.forward = 233
    args.turn = 22
    args.reverse = 0xbb

    # Make sure _graceful is in the end
    calls = [_forward, _reverse, _turn, _startVideo, _stopVideo,
             _queryproc, _graceful]

    print Fore.MAGENTA + "Testing all commands..." + Fore.RESET
    for c in calls:
        c()

try:
    if   args.forward:      _forward()
    elif args.turnLeft:     _turnLeft()
    elif args.turnRight:    _turnRight()
    elif args.stop:         _stop()
    elif args.reverse:      _reverse()
    elif args.queryproc:    _queryproc()
    elif args.graceful:     _graceful()
    elif args.testall:      _testAll()
    elif args.stopvid:      _stopVideo()
    elif args.startvid:     _startVideo()

except RoboticsnetException as e:
    print "Something wrong happened!"
    print Fore.RED, e.message, Fore.RESET

except Exception as e:
    print Fore.RED, "Something terribly wrong happened."
    print "It would probably be a good idea to file a bug report", Fore.RESET
    print e.message
