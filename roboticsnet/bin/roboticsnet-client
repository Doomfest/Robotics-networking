#!/usr/bin/env python2.7

import sys
import argparse

from roboticsnet.client.rover_client import RoverClient
from roboticsnet.byte_helpers.queryproc_byte_arr_helper import QueryprocByteArrHelper
from roboticsnet.gateway_constants import *

from colorama import Fore

# Configuration
parser = argparse.ArgumentParser('Manually send commands to listener.')

parser.add_argument('--move',
        help='send move command, given a value from 0 to 255',
        type=int)

parser.add_argument('--turn',
        help='send turn command, given a value from 0 to 255',
        type=int)

parser.add_argument('--queryproc',
        help='send query about what is currently running',
        action='store_true')

parser.add_argument('--graceful',
        help='shutdown server gracefully',
        action='store_true')

parser.add_argument('--host',
        help='specify an alternate host to default localhost')

parser.add_argument('--port',
        help='specify an alternate port to default 5000',
        type=int)

parser.add_argument('--testall',
        help='sends a command of each',
        action='store_true')

args = parser.parse_args()

# These will be overwritten if --port, or --host is supplied
host, port = 'localhost', ROBOTICSNET_PORT

if args.host:
    host = args.host

if args.port:
    port = args.port

##### RUN
client = RoverClient(host, port)
print "Using port: " + Fore.GREEN, client.getPort(), Fore.RESET
print "Using host: " + Fore.GREEN, client.getHost(), Fore.RESET

def _move():
    print "Send " + Fore.BLUE + "move" + Fore.RESET + " command...",
    client.move(args.move)
    print Fore.GREEN, "Done!", Fore.RESET

def _turn():
    print "Send " + Fore.BLUE + "turn" + Fore.RESET+ " command...",
    client.turn(args.turn)
    print Fore.GREEN, "Done!", Fore.RESET

def _queryproc():
    print "Send " + Fore.BLUE + "query" + Fore.RESET + " to listener...",
    reply = client.query()
    print Fore.GREEN, "Done!", Fore.RESET
    print QueryprocByteArrHelper.format(reply)

def _graceful():
    print "Requesting " + Fore.BLUE + "shutdown" + Fore.RESET + "...",
    client.graceful()
    print Fore.GREEN, "Done!", Fore.RESET

def _testAll():
    """ Test all commands with dummy data """
    args.move = 233
    args.turn = 22
    calls = [_move, _turn, _queryproc, _graceful]
    print Fore.MAGENTA + "Testing all commands..." + Fore.RESET
    for c in calls:
        c()

if   args.move: _move()
elif args.turn: _turn()
elif args.queryproc: _queryproc()
elif args.graceful: _graceful()
elif args.testall: _testAll()

