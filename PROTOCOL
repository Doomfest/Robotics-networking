ROVER PROTOCOLS
===============================================================================

Full Table of Commands
----------------------

+--------------+-------+
|Label         | Value |
+--------------+-------+
|forward       | 0x01  |
|reverse       | 0x02  |
|forwardLeft   | 0x03  |
|forwardRight  | 0x04  |
|stop          | 0x05  |
|queryproc     | 0x06  |
|startvid      | 0x07  |
|stopvid       | 0x08  |
|reverseLeft   | 0x09  |
|reverseRight  | 0x10  |
|sensinfo      | 0x11  |
|graceful      | 0xFF  |
+--------------+-------+

GRACEFUL SHUTDOWN
-----------------

To stop the listener from listening you send the 'graceful' command to the
server.

+--------------+-------------+
| ActionLabel  | ActionHex   |
+--------------+-------------+
| graceful     | 0xFF        |
+--------------+-------------+


A 'number' is an integer, positive, or negative. We use integers for movement
speed, and wheel rotation (rotation for turns).

  Number is a negative, or positive integer. Limits for now are up to 255.
    number ::= (-)[0-9]+

  Movement forward:
    forward <number>

  Movement backwards:
    reverse <number>

  Turning forward:
    forwardLeft <number>
    forwardRight <number>

  Turning backwards:
    reverseLeft <number>
    reverseRight <number>

  Stoping motor wheels:
    stop <number>

When we're actually sending the commands, we want to turn the above into udp
packets. It would not make sense to send whole strings over the network.
Therefore we can bind hex values to the commands in this manner:

+--------------+-------------+
| ActionLabel  | ActionHex   |
+--------------+-------------+
| forward      | 0x01        |
| reverse      | 0x02        |
| forwardLeft  | 0x03        |
| forwardRight | 0x04        |
| stop         | 0x05        |
| reverseLeft  | 0x09        |
| reverseRight | 0x10        |
+--------------+-------------+


PROCESS MANAGER (QUERYPROC)
===============================================================================

We are able to query about different running processes with the following
messages:

+--------------+-------------+
| ActionLabel  | ActionHex   |
+--------------+-------------+
| queryproc    | 0x06        |
+--------------+-------------+

Once the client sends one packet with the above value, the client must wait to
receive a response. The first byte is to signal that this is a queryproc
response (NB: This is received on the client side).

+----------------+-------------+
| ActionLabel    | ActionHex   |
+----------------+-------------+
| queryprocresp  | 0x04        |
+----------------+-------------+

What is expected afterwards is a list of processes. The list of processes
returned will be tuples of ids, to classify processes, and their status.
The labels of the processes are found in the following table.

+-------------------+-------------+
| Process Label     | Hex id      |
+-------------------+-------------+
| rovercore         | 0x00        |
| camera1           | 0x01        |
| camera2           | 0x02        |
| camera3           | 0x03        |
+-------------------+-------------+

And they're bound to the following possible status IDs:

+-------------------+-------------+
| Proc Status Label | Hex         |
+-------------------+-------------+
| Dead              | 0x00        |
| Running           | 0x01        |
| BadState          | 0x02        |
+-------------------+-------------+

So for example, the following sequence:

    [ <0x00, 0x01>, <0x01, 0x01>, <0x03, 0x03> ]

would mean that the rovercore is in `running` state, the `first camera` process
is running, but the `third` one is in `bad state`.

START / STOP VIDEO
===============================================================================

To start the video, we just need to send the start and stop constants. There is
no response. If we want to find out status of the video process, we use the
queryproc command (discussed in this document).

+-------------------+-------------+
| Process Label     | Hex id      |
+-------------------+-------------+
| startvid          | 0x07        |
| stopvid           | 0x08        |
+-------------------+-------------+

SENSINFO
===============================================================================

This is to return information from different sensors on the rover. Invoke this
command on the server. Await for a response. The response contains all the
information needed in order to parse the complete reply.

+-------------------+-------------+
| Label             | Hex ID      |
+-------------------+-------------+
| sensinfo          | 0x11        |
+-------------------+-------------+

Once this is invoked, a reply is sent back. The reply starts with the following
byte.

+-------------------+-------------+
| Label             | Hex ID      |
+-------------------+-------------+
| sensinforesp      | 0x12        |
+-------------------+-------------+

The second byte lists how many sensor information we'll be receiving back. If we
receive information about 3 sensors, we'll receive 6 total bytes (one byte for
sensor id, and the other byte for the magnitude recorded).

  [0x12, 0x03,
         0x01, 0x30,
         0x02, 0x43,
         0x04, 0x120]

First byte: 0x12: sensifo command response
[sensinfo] 0x03: 3 sensors to received/parsed
[sensinfo:1] temperature: value 30 (hex) received
[sensinfo:2] somesensor1: value 43 (hex) received
[sensinfo:3] somesensor2: value 120 (hex) received

