ROVER PROTOCOLS
===============

Full Table of Commands
----------------------

+--------------+-------+
|Label         | Value |
+--------------+-------+
|move          | 0x01  |
|turn          | 0x02  |
|queryproc     | 0x03  |
|reverse       | 0x04  |
|graceful      | 0xFF  |
+--------------+-------+

GRACEFUL SHUTDOWN
-----------------

To stop the listener from listening you send the 'graceful' command to the
server.

+--------------+-------------+
| ActionLabel  | ActionHex   |
+--------------+-------------+
| graceful     | 0xFF        |
+--------------+-------------+


A 'number' is an integer, positive, or negative. We use integers for movement,
and wheel rotation (rotation for turns).

  Number is a negative, or positive integer. Limits for now are up to 255.
    number ::= (-)[0-9]+

  Movement forward:
    move <number>

  Movement backwards:
    reverse <number>

  Rotate wheels:
    turn <number>

When we're actually sending the commands, we want to turn the above into udp
packets. It would not make sense to send whole strings over the network.
Therefore we can bind hex values to the commands in this manner:

+--------------+-------------+
| ActionLabel  | ActionHex   |
+--------------+-------------+
| move         | 0x01        |
| turn         | 0x02        |
| reverse      | 0x04        |
+--------------+-------------+


PROCESS MANAGER (QUERYPROC)
===========================

We are able to query about different running processes with the following
messages:

+--------------+-------------+
| ActionLabel  | ActionHex   |
+--------------+-------------+
| queryproc    | 0x03        |
+--------------+-------------+

Once the client sends one packet with the above value, the client must wait to
receive a response. The first byte is to signal that this is a queryproc
response (NB: This is received on the client side).

+----------------+-------------+
| ActionLabel    | ActionHex   |
+----------------+-------------+
| queryprocresp  | 0x04        |
+----------------+-------------+

What is expected afterwards is a list of processes. The list of processes
returned will be tuples of ids, to classify processes, and their status.
The labels of the processes are found in the following table.

+-------------------+-------------+
| Process Label     | Hex id      |
+-------------------+-------------+
| rovercore         | 0x00        |
| camera1           | 0x01        |
| camera2           | 0x02        |
| camera3           | 0x03        |
+-------------------+-------------+

And they're bound to the following possible status IDs:

+-------------------+-------------+
| Proc Status Label | Hex         |
+-------------------+-------------+
| Dead              | 0x00        |
| Running           | 0x01        |
| BadState          | 0x02        |
+-------------------+-------------+

So for example, the following sequence:

    [ <0x00, 0x01>, <0x01, 0x01>, <0x03, 0x03> ]

would mean that the rovercore is in `running` state, the `first camera` process
is running, but the `third` one is in `bad state`.


